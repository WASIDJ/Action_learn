name: 自动部署所有 Slidev 幻灯片

on:
  workflow_dispatch:    # 手动触发部署

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: 检出仓库代码
      uses: actions/checkout@v3

    - name: 设置 Node.js 环境
      uses: actions/setup-node@v3
      with:
        node-version: '22'

    - name: 安装根目录依赖
      working-directory: slidev学习
      run: npm install

    - name: 查找 Slidev 项目目录
      id: find_projects
      run: |
        # 使用更精确的路径排除方式
        projects=$(find . -maxdepth 2 -type f -name "slides.md" -not -path "./slidev/*")
        echo "找到的项目："
        echo "$projects"
        
        if [ -z "$projects" ]; then
          echo "projects=[]" >> $GITHUB_OUTPUT
          exit 0
        fi

        # 处理目录路径并生成 JSON 数组
        project_list=$(echo "$projects" | xargs -n1 dirname | sort -u)
        json=$(echo "$project_list" | jq -R -s -c '[.[] | select(. != "")]')
        
        echo "projects=$json" >> $GITHUB_OUTPUT
      shell: bash

    - name: 构建所有 Slidev 项目
      run: |
        projects='${{ steps.find_projects.outputs.projects }}'
        
        # 处理空数组情况
        if [[ "$projects" == "[]" ]]; then
          echo "没有找到可构建的项目"
          exit 0
        fi

        echo "$projects" | jq -cr '.[]' | while read project; do
          echo "正在构建项目：$project"
          
          # 进入项目目录并保留路径空格处理
          cd "$project"
          
          # 使用 npm ci 替代 install 保证一致性
          if [[ -f "package.json" ]]; then
            echo "安装项目依赖..."
            npm ci --silent || echo "依赖安装失败，尝试继续构建..."
          fi
          
          # 构建命令添加错误退出控制
          if ! npx slidev build --base /slidev/$(basename "$project")/; then
            echo "构建失败：$project"
            exit 1
          fi
          
          cd - >/dev/null
        done
      shell: bash

    - name: 收集构建产物
      run: |
        projects='${{ steps.find_projects.outputs.projects }}'
        
        # 创建目标目录
        mkdir -p slidev
        
        echo "$projects" | jq -cr '.[]' | while read project; do
          target="slidev/$(basename "$project")"
          
          if [[ -d "$project/dist" ]]; then
            echo "复制 $project/dist 到 $target"
            cp -rv "$project/dist" "$target"
          else
            echo "警告：$project/dist 目录不存在"
          fi
        done
      shell: bash

    - name: 提交并推送更新
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git add .
        
        # 改进提交信息
        if git diff-index --quiet HEAD --; then
          echo "没有检测到文件变更"
        else
          git commit -m "自动部署 Slidev 幻灯片（${{ github.run_id }}）[skip ci]"
          git push origin main
        fi
      shell: bash
